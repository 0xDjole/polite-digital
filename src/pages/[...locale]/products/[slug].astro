---
import BaseLayout from "@layouts/BaseLayout.astro";
import ProductDetail from "@lib/EShop/ProductDetail/index.svelte";
import { cmsApi, getBlockFromArray } from "@lib/index";
import { defaultLocale, getLocale, locales } from "@lib/i18n";
import appConfig from "../../../appConfig";

const API_URL = appConfig.apiUrl;
const BUSINESS_ID = appConfig.businessId;

export async function getStaticPaths() {
	const { default: appConfig } = await import("../../../appConfig");
	const API_URL = appConfig.apiUrl;
	const BUSINESS_ID = appConfig.businessId;

	try {
		const res = await fetch(`${API_URL}/v1/businesses/${BUSINESS_ID}/products?limit=100`);
		
		if (!res.ok) {
			console.error('Failed to fetch products:', res.status, res.statusText);
			return [];
		}

		const data = await res.json();
		const items = data.items || [];

		return items.flatMap((product) =>
			locales.map((locale) => ({
				params: {
					slug: product.slug,
					locale: locale === defaultLocale ? undefined : locale,
				},
				props: { locale },
			})),
		);
	} catch (error) {
		console.error('Error fetching products for static paths:', error);
		return [];
	}
}

const { slug } = Astro.params;

let product = null;
try {
	const productRes = await fetch(`${API_URL}/v1/businesses/${BUSINESS_ID}/products/slug/${BUSINESS_ID}/${slug}`);
	
	if (!productRes.ok) {
		throw new Error(`Failed to fetch product: ${productRes.status} ${productRes.statusText}`);
	}
	
	product = await productRes.json();
} catch (error) {
	console.error('Error fetching product:', error);
	// Return 404 if product not found
	return Astro.redirect("/404");
}

const { getCollection } = cmsApi();
const websiteCollection = await getCollection("website");

const currLocale = getLocale(Astro.currentLocale);
const siteData = getBlockFromArray(websiteCollection, "info", currLocale);
---

<BaseLayout title={`${product.name} - ${siteData.title}`} description={product.description}>
	<ProductDetail {product} client:load />
</BaseLayout>