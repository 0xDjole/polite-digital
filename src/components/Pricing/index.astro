---
import { Icon } from "astro-icon/components";
import Button from "@components/Button/Button.astro";
import Switch from "@components/Switch";
import { cmsApi } from "@lib/index";
import { getLocale } from "@lib/i18n";

const { getCollection, getBlockObjectValues } = cmsApi();
const websiteCollection = await getCollection("website");

const currLocale = getLocale(Astro.currentLocale);
const pricingData = getBlockObjectValues(websiteCollection, "pricing_plans", currLocale);
---

<section id="pricing-4" class="my-24 md:my-36">
	<div class="site-container">
		<div class="flex justify-center">
			<p class="colored-title inline pricing-title gsap-fade-up">Pricing</p>
		</div>
		<h2 class="h2 mt-8 text-center pricing-heading gsap-fade-up" data-delay="0.2">A plan for every business</h2>

		<div class="mt-6 flex justify-center pricing-toggle gsap-fade-up" data-delay="0.4">
			<label
				for="plan-4__toggle"
				class="bg-muted border-primary relative inline-flex cursor-pointer items-center rounded-lg border p-2 select-none"
			>
				<span class="text-secondary mr-3 text-sm font-medium">Monthly</span>
				<Switch variant="primary" id="plan-4__toggle" class="mx-2" />
				<span class="text-secondary ml-3 text-sm font-medium">Yearly</span>
			</label>
		</div>

		<div class="mx-auto mt-12 grid w-full max-w-7xl gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 pricing-grid gsap-stagger" style="overflow: visible;">
			{
				pricingData.map((plan) => (
					<div
						class:list={[
							"pricing-plan hover-lift gsap-stagger-item relative mx-auto h-full w-full max-w-sm overflow-hidden rounded-2xl transition-all duration-300",
							{
								"bg-gradient-primary": plan.featured === true,
								"bg-tertiary": plan.featured !== true,
							},
						]}
					>
						<div class="relative h-full p-px">
							<div class="bg-card relative z-10 flex h-full flex-col overflow-hidden rounded-[calc(1rem-1px)]">
								{plan.featured === true && (
									<div
										class="glow-primary absolute top-0 left-0 -z-10 mx-auto aspect-square w-full max-w-7xl -translate-x-1/2 -translate-y-1/2 rounded-full blur-3xl"
										aria-hidden="true"
									/>
								)}
								<div class="mx-auto flex h-full w-full max-w-[20rem] flex-col px-6 pb-6">
									<div class="flex w-full justify-between pt-6">
										<h3
											class:list={[
												"text-lg font-semibold",
												{
													"main-text-gradient": plan.featured === true,
													"text-primary": plan.featured !== true,
												},
											]}
										>
											{plan.name}
										</h3>
										{plan.featured === true && (
											<div class="flex w-full items-center justify-end">
												<div class="bg-brand text-brand flex gap-2 rounded-full px-3 py-1 text-sm font-medium">
													<p class="flex items-center">Most popular</p>
												</div>
											</div>
										)}
									</div>
									<div class="pt-3">
										<p class="text-secondary">{plan.description}</p>
										<p class="mt-3 font-semibold">
											{plan.custom === true ? (
												<span class="text-price text-5xl font-semibold">Custom</span>
											) : (
												<>
													<div class="pricing-monthly">
														<span class="text-price text-5xl font-semibold">${plan.monthly}</span>
														<span class="text-secondary text-3xl">/mo</span>
														<br />
														<p class="text-muted mt-1 text-sm font-normal">(paid monthly)</p>
													</div>
													<div class="pricing-yearly hidden">
														<span class="text-price text-5xl font-semibold">${plan.yearly}</span>
														<span class="text-secondary text-3xl">/mo</span>
														<br />
														<p class="text-muted mt-1 text-sm font-normal">(paid yearly)</p>
													</div>
												</>
											)}
										</p>
									</div>
									<ul class="my-6 flex w-full flex-col gap-2">
										{plan.features.map((feature) => (
											<li class="text-secondary flex items-center">
												<Icon
													name="mdi:check"
													class="text-check mr-2 h-5 w-5 flex-shrink-0"
													aria-hidden="true"
												/>
												<span class="inline">{feature}</span>
											</li>
										))}
									</ul>
									<div class="mt-auto">
										<Button
											variant={plan.featured === true ? "primary" : "outline"}
											href="#contact-form"
											class="w-full"
										>
											Get Started
										</Button>
									</div>
								</div>
							</div>
						</div>
					</div>
				))
			}
		</div>
	</div>
</section>

<script>
	function setupPricingToggle() {
		const pricingSection = document.getElementById("pricing-4") as HTMLElement;
		const toggle = pricingSection.querySelector("#plan-4__toggle") as HTMLInputElement;
		const monthlyPrices = pricingSection?.querySelectorAll(".pricing-monthly");
		const yearlyPrices = pricingSection?.querySelectorAll(".pricing-yearly");

		if (!toggle || !monthlyPrices || !yearlyPrices) return;

		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.type === "attributes" && mutation.attributeName === "aria-checked") {
					const isYearly = toggle.getAttribute("aria-checked") === "true";
					monthlyPrices.forEach((price) => price.classList.toggle("hidden", isYearly));
					yearlyPrices.forEach((price) => price.classList.toggle("hidden", !isYearly));
				}
			});
		});

		observer.observe(toggle, {
			attributes: true,
			attributeFilter: ["aria-checked"],
		});
	}

	setupPricingToggle();
	document.addEventListener("astro:after-swap", setupPricingToggle);
</script>

<script type="module">
	import { gsap } from '/src/lib/gsap-init.js';
	
	// Enhanced pricing animations
	function initPricingAnimations() {
		console.log('ðŸ’° Initializing PowerPoint-style Pricing Animations');
		
		// Enhanced pricing card hover effects
		document.querySelectorAll('.pricing-plan').forEach((card, index) => {
			// Enhanced hover effects with PowerPoint-style animations
			card.addEventListener('mouseenter', () => {
				gsap.to(card, { 
					scale: 1.08, 
					y: -15,
					rotation: 1,
					boxShadow: "0 25px 50px rgba(0,0,0,0.2)",
					duration: 0.4, 
					ease: "back.out(1.7)" 
				});
			});
			
			card.addEventListener('mouseleave', () => {
				gsap.to(card, { 
					scale: 1, 
					y: 0,
					rotation: 0,
					boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
					duration: 0.4, 
					ease: "power2.out" 
				});
			});

			// Add subtle floating animation to featured cards
			if (card.querySelector('.bg-gradient-primary')) {
				gsap.to(card, {
					y: -5,
					duration: 2,
					repeat: -1,
					yoyo: true,
					ease: "sine.inOut"
				});
			}
		});

		// Enhanced button hover effects
		document.querySelectorAll('.pricing-plan button').forEach(button => {
			button.addEventListener('mouseenter', () => {
				gsap.to(button, { 
					scale: 1.1,
					duration: 0.3, 
					ease: "back.out(1.7)" 
				});
			});
			
			button.addEventListener('mouseleave', () => {
				gsap.to(button, { 
					scale: 1,
					duration: 0.3, 
					ease: "power2.out" 
				});
			});
		});
	}
	
	// Initialize animations
	document.addEventListener('DOMContentLoaded', initPricingAnimations);
	document.addEventListener('astro:after-swap', initPricingAnimations);
</script>
