---
import { Icon } from "astro-icon/components";
import { getLocale, getRelativeLocaleUrl } from "@lib/i18n";

/**
 * Compares two paths ensuring they both have trailing slashes for consistency
 * @param path1 First path to compare
 * @param path2 Second path to compare
 * @returns boolean indicating if the paths are equal
 */
const comparePathsWithTrailingSlash = (path1: string, path2: string): boolean => {
	const ensureTrailingSlash = (path: string): string => (path.endsWith("/") ? path : `${path}/`);
	return ensureTrailingSlash(path1) === ensureTrailingSlash(path2);
};

interface Props {
	navItem: any;
	class?: string;
	icon?: string;
	noIcon?: boolean;
}

const { navItem, class: className, noIcon = false } = Astro.props as Props;
const { text, link, newTab = false, icon } = navItem;

const domain = import.meta.env.SITE; // pulls from astro.config.mjs
let actualLink: string;
if (!link.includes(domain) && !link.startsWith("/") && !link.startsWith("#")) {
	// it is an external link
	actualLink = link;
} else {
	// internal link, so we need to add the locale to the link
	actualLink = getRelativeLocaleUrl(Astro.currentLocale, link);
}
// remove trailing slash so IDs will work
if (actualLink.endsWith("/") && actualLink !== "/") {
	actualLink = actualLink.slice(0, -1);
}

const isActive = comparePathsWithTrailingSlash(Astro.url.pathname, actualLink);
---

<li class="w-full">
	<a
		class:list={[
			"nav-link primary-focus relative flex items-center gap-1.5 px-4 py-1.5 transition-colors",
			{
				"nav-link-active font-medium": isActive,
			},
			className,
		]}
		href={actualLink}
		target={newTab ? "_blank" : ""}
		rel={newTab ? "noopener noreferrer" : ""}
		aria-label={text}
	>
		{icon && !noIcon && <Icon name={icon} aria-hidden="true" class="size-4" />}
		{text}
	</a>
</li>

<style>
	.nav-link-active {
		color: var(--text-price);
	}

	.nav-link {
		color: var(--color-primary);

		&:hover {
			color: var(--color-700) !important;
		}
	}
</style>
